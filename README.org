#+title: Laravel雑記帳
#+auther: kenjirofukuda
#+options: toc:nil num:nil ^:nil
#+HTML_HEAD_EXTRA: <style> .figure p {text-align: left;}</style>

* リポジトリ概要

laracast の [[https://laracasts.com/series/30-days-to-learn-laravel-11][30 Days to Learn Laravel]] に従いコード追従するだけである。
学んだ結果を [[https://github.com/kenjirofukuda/gdsfeel-php2][gdsfeel-php2]] にフィードバックしていく。

気づきを書いているだけなので、内容はLaravelに限らない。

* tailwinds
楽に記述できるというだけで、css本来の意図に反していて気持ちが悪い。
しかし、見栄えだけが優先されるご時世仕方なし
- https://laracasts.com/series/30-days-to-learn-laravel-11/episodes/4
- https://tailwindcss.com/plus/ui-blocks/application-ui/application-shells/stacked

** おすすめできない理由
- https://qiita.com/kohki_takatama/items/3f2ebbf7f124acc56ad8
同意

** CDN によるスタイルの適用
- https://tailwindcss.com/docs/installation/play-cdn

* 消化済みのコース
** laracssts
- [[https://laracasts.com/series/30-days-to-learn-laravel-11/episodes/11]]
- [[https://laracasts.com/series/30-days-to-learn-laravel-11/episodes/10]]
- https://laracasts.com/series/30-days-to-learn-laravel-11/episodes/9
- https://laracasts.com/series/30-days-to-learn-laravel-11/episodes/8
- https://laracasts.com/series/30-days-to-learn-laravel-11/episodes/7
- https://laracasts.com/series/30-days-to-learn-laravel-11/episodes/6
- https://laracasts.com/series/30-days-to-learn-laravel-11/episodes/5
- https://laracasts.com/series/30-days-to-learn-laravel-11/episodes/4
- https://laracasts.com/series/30-days-to-learn-laravel-11/episodes/3
- https://laracasts.com/series/30-days-to-learn-laravel-11/episodes/2
- https://laracasts.com/series/30-days-to-learn-laravel-11/episodes/1

* TablePlus
TablePlus上のsqlite使用にてバグがあり、アプリケーションの再起動または電源アイコンボタンで一度閉じてから開き直さないと前回の状態が表示されたままとなる。
コメント欄にて、https://sqlitebrowser.org/ を推奨されていた。

*  RDBに適用できるか?
データ構造が単純なRDBで置き換えられるような形式ではないためLaravel向きではない。
クライアント描画の都合上、JSON主体なのでMongoDB向きなのかもしれない。

MongoDBに移行する際は [[https://www.mongodb.com/resources/products/compatibilities/mongodb-laravel-integration][MongoDB and Laravel Integration]] を参考にすること。

Laravelそのものは、ビューの記述を簡素化させる目的で使用しても問題はないがRDBを使わない前提ならオーバースペックすぎる。

どちらにしても、Webストレージに保存してクライアント側でゴリゴリやったほうがレスポンスが良いと想定している。
どちらが速いかをみるためにも計測してみる価値はある。

* 無理やりRDBにした場合
注）全ては網羅していない、連携の思案

**  Library

- 関連 :: Library hasMany(Structure)

| id            | INTEGER  | AUTO                                       |
| name          | VARCHAR  | 内部名（ファイル名ではない）               |
| self_created  | DATETIME | 作成タイムスタンプ（レコード生成ではない） |
| self_modified | DATETIME | 修正タイムスタンプ（レコード修正ではない） |
| user_unit     | REAL     | ex. 0.001 1データベース単位の値            |
| meter_unit    | REAL     | ex. 単位 1e-9: micron                      |


**  Structure

- 関連 :: Structure hasMany(Element)

| id            | INTEGER  | AUTO                                       |
| name          | VARCHAR  | ストラクチャ名                             |
| self_created  | DATETIME | 作成タイムスタンプ（レコード生成ではない） |
| self_modified | DATETIME | 修正タイムスタンプ（レコード修正ではない） |
| library_id    | INTEGER  | 所属ライブラリid                           |


**  Element

インスタンス化されるときは別々のクラスとなるが、テーブルの種類が肥大化するのを避けるため単一のテーブルにユニオン定義する。
よって、無駄なフィールドも多くなる。

- 関連 ::  hasMany(Coord)

| id           | INTEGER       | AUTO                     |
| type         | INTEGER       | Elementタイプ            |
| library_id   | INTEGER       | 所属ライブラリid         |
| structure_id | INTEGER       | 所属ストラクチャid       |
| elkey        | INTEGER       | ストラクチャ内ユニークID |
| ref_name     | VARCHAR       | SREF,AREF                |
| coods ※ 1    | TEXT or JSONB | 座標群のJSON表現         |

***  ※ 1 coods 座標群

- 候補1 :: テーブル化
- 候補2 :: coords フィールドを設けて JSON 形式で保存

**  Coord

座標

以下は
座標群の格納に、テーブル化を選択した場合

| id         | INTEGER | AUTO         |
| x          | REAL    |              |
| y          | REAL    |              |
| element_id | INTEGER | エレメントid |
